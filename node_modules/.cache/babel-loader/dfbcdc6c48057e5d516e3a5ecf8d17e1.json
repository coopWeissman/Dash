{"ast":null,"code":"var _jsxFileName = \"/Users/cooper/Downloads/material-dashboard-react-main/src/components/CustomInput/CustomInput.js\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Feild(props) {\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    label: props.label,\n    variant: \"outlined\",\n    type: \"number\",\n    onChange: props.Change\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 8\n  }, this);\n}\n\n_c = Feild;\n;\nexport default Feild; // import React from \"react\";\n// import classNames from \"classnames\";\n// import PropTypes from \"prop-types\";\n// // @material-ui/core components\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import FormControl from \"@material-ui/core/FormControl\";\n// import InputLabel from \"@material-ui/core/InputLabel\";\n// import Input from \"@material-ui/core/Input\";\n// // @material-ui/icons\n// import Clear from \"@material-ui/icons/Clear\";\n// import Check from \"@material-ui/icons/Check\";\n// // core components\n// import styles from \"assets/jss/material-dashboard-react/components/customInputStyle.js\";\n// const useStyles = makeStyles(styles);\n// export default function CustomInput(props) {\n//   const classes = useStyles();\n//   const {\n//     formControlProps,\n//     labelText,\n//     id,\n//     labelProps,\n//     inputProps,\n//     error,\n//     success,\n//     rtlActive,\n//   } = props;\n//   const labelClasses = classNames({\n//     [\" \" + classes.labelRootError]: error,\n//     [\" \" + classes.labelRootSuccess]: success && !error,\n//     [\" \" + classes.labelRTL]: rtlActive,\n//   });\n//   const underlineClasses = classNames({\n//     [classes.underlineError]: error,\n//     [classes.underlineSuccess]: success && !error,\n//     [classes.underline]: true,\n//   });\n//   const marginTop = classNames({\n//     [classes.marginTop]: labelText === undefined,\n//   });\n//   let newInputProps = {\n//     maxLength:\n//       inputProps && inputProps.maxLength ? inputProps.maxLength : undefined,\n//     minLength:\n//       inputProps && inputProps.minLength ? inputProps.minLength : undefined,\n//     step: inputProps && inputProps.step ? inputProps.step : undefined,\n//   };\n//   return (\n//     <FormControl\n//       {...formControlProps}\n//       className={formControlProps.className + \" \" + classes.formControl}\n//     >\n//       {labelText !== undefined ? (\n//         <InputLabel\n//           className={classes.labelRoot + labelClasses}\n//           htmlFor={id}\n//           {...labelProps}\n//         >\n//           {labelText}\n//         </InputLabel>\n//       ) : null}\n//       <Input\n//         classes={{\n//           root: marginTop,\n//           disabled: classes.disabled,\n//           underline: underlineClasses,\n//         }}\n//         id={id}\n//         {...inputProps}\n//         inputProps={newInputProps}\n//       />\n//       {error ? (\n//         <Clear className={classes.feedback + \" \" + classes.labelRootError} />\n//       ) : success ? (\n//         <Check className={classes.feedback + \" \" + classes.labelRootSuccess} />\n//       ) : null}\n//     </FormControl>\n//   );\n// }\n// CustomInput.propTypes = {\n//   labelText: PropTypes.node,\n//   labelProps: PropTypes.object,\n//   id: PropTypes.string,\n//   inputProps: PropTypes.object,\n//   formControlProps: PropTypes.object,\n//   error: PropTypes.bool,\n//   success: PropTypes.bool,\n//   rtlActive: PropTypes.bool,\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"Feild\");","map":{"version":3,"sources":["/Users/cooper/Downloads/material-dashboard-react-main/src/components/CustomInput/CustomInput.js"],"names":["React","TextField","Feild","props","label","Change"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,sBACG,QAAC,SAAD;AACI,IAAA,KAAK,EAAGA,KAAK,CAACC,KADlB;AAEI,IAAA,OAAO,EAAC,UAFZ;AAGI,IAAA,IAAI,EAAC,QAHT;AAII,IAAA,QAAQ,EAAED,KAAK,CAACE;AAJpB;AAAA;AAAA;AAAA;AAAA,UADH;AAQH;;KATQH,K;AASR;AAED,eAAeA,KAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nfunction Feild(props) {\n    return(\n       <TextField\n           label= {props.label}\n           variant=\"outlined\"\n           type=\"number\"\n           onChange={props.Change}\n         />\n   )\n};\n \nexport default Feild\n\n\n\n// import React from \"react\";\n// import classNames from \"classnames\";\n// import PropTypes from \"prop-types\";\n// // @material-ui/core components\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import FormControl from \"@material-ui/core/FormControl\";\n// import InputLabel from \"@material-ui/core/InputLabel\";\n// import Input from \"@material-ui/core/Input\";\n// // @material-ui/icons\n// import Clear from \"@material-ui/icons/Clear\";\n// import Check from \"@material-ui/icons/Check\";\n// // core components\n// import styles from \"assets/jss/material-dashboard-react/components/customInputStyle.js\";\n\n// const useStyles = makeStyles(styles);\n\n// export default function CustomInput(props) {\n//   const classes = useStyles();\n//   const {\n//     formControlProps,\n//     labelText,\n//     id,\n//     labelProps,\n//     inputProps,\n//     error,\n//     success,\n//     rtlActive,\n//   } = props;\n\n//   const labelClasses = classNames({\n//     [\" \" + classes.labelRootError]: error,\n//     [\" \" + classes.labelRootSuccess]: success && !error,\n//     [\" \" + classes.labelRTL]: rtlActive,\n//   });\n//   const underlineClasses = classNames({\n//     [classes.underlineError]: error,\n//     [classes.underlineSuccess]: success && !error,\n//     [classes.underline]: true,\n//   });\n//   const marginTop = classNames({\n//     [classes.marginTop]: labelText === undefined,\n//   });\n//   let newInputProps = {\n//     maxLength:\n//       inputProps && inputProps.maxLength ? inputProps.maxLength : undefined,\n//     minLength:\n//       inputProps && inputProps.minLength ? inputProps.minLength : undefined,\n//     step: inputProps && inputProps.step ? inputProps.step : undefined,\n//   };\n//   return (\n//     <FormControl\n//       {...formControlProps}\n//       className={formControlProps.className + \" \" + classes.formControl}\n//     >\n//       {labelText !== undefined ? (\n//         <InputLabel\n//           className={classes.labelRoot + labelClasses}\n//           htmlFor={id}\n//           {...labelProps}\n//         >\n//           {labelText}\n//         </InputLabel>\n//       ) : null}\n//       <Input\n//         classes={{\n//           root: marginTop,\n//           disabled: classes.disabled,\n//           underline: underlineClasses,\n//         }}\n//         id={id}\n//         {...inputProps}\n//         inputProps={newInputProps}\n//       />\n//       {error ? (\n//         <Clear className={classes.feedback + \" \" + classes.labelRootError} />\n//       ) : success ? (\n//         <Check className={classes.feedback + \" \" + classes.labelRootSuccess} />\n//       ) : null}\n//     </FormControl>\n//   );\n// }\n\n// CustomInput.propTypes = {\n//   labelText: PropTypes.node,\n//   labelProps: PropTypes.object,\n//   id: PropTypes.string,\n//   inputProps: PropTypes.object,\n//   formControlProps: PropTypes.object,\n//   error: PropTypes.bool,\n//   success: PropTypes.bool,\n//   rtlActive: PropTypes.bool,\n// };\n"]},"metadata":{},"sourceType":"module"}